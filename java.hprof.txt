JAVA PROFILE 1.0.1, created Sat Dec 10 23:16:26 2016

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000180, id = 200001, name="main", group="main")
THREAD END (id = 200001)
TRACE 300118:
	sun.launcher.LauncherHelper.getLocalizedMessage(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.abort(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.checkAndLoadMain(<Unknown Source>:Unknown line)
TRACE 300079:
	sun.launcher.LauncherHelper.getLocalizedMessage(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.abort(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.checkAndLoadMain(<Unknown Source>:Unknown line)
TRACE 300082:
	java.util.ResourceBundle.<clinit>(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper$ResourceBundleHolder.<clinit>(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.getLocalizedMessage(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.abort(<Unknown Source>:Unknown line)
TRACE 300080:
	sun.launcher.LauncherHelper$ResourceBundleHolder.<clinit>(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.getLocalizedMessage(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.abort(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.checkAndLoadMain(<Unknown Source>:Unknown line)
TRACE 300004:
	java.lang.invoke.MethodType.<clinit>(<Unknown Source>:Unknown line)
	java.lang.invoke.LambdaForm$NamedFunction.<clinit>(<Unknown Source>:Unknown line)
	java.lang.invoke.MethodHandle.<clinit>(<Unknown Source>:Unknown line)
TRACE 300112:
	java.util.ResourceBundle.findBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.findBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.findBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.getBundleImpl(<Unknown Source>:Unknown line)
TRACE 300106:
	java.util.Arrays.asList(<Unknown Source>:Unknown line)
	java.util.ResourceBundle$Control.<clinit>(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.getDefaultControl(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.getBundle(<Unknown Source>:Unknown line)
TRACE 300102:
	java.net.URLClassLoader$3.next(<Unknown Source>:Unknown line)
	java.net.URLClassLoader$3.hasMoreElements(<Unknown Source>:Unknown line)
	sun.misc.CompoundEnumeration.next(<Unknown Source>:Unknown line)
	sun.misc.CompoundEnumeration.hasMoreElements(<Unknown Source>:Unknown line)
TRACE 300101:
	java.lang.AbstractStringBuilder.<init>(<Unknown Source>:Unknown line)
	java.lang.StringBuilder.<init>(<Unknown Source>:Unknown line)
	sun.net.util.URLUtil.urlNoFragString(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath.getLoader(<Unknown Source>:Unknown line)
TRACE 300100:
	sun.misc.URLClassPath$JarLoader.getJarFile(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$JarLoader.access$600(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$JarLoader$1.run(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$JarLoader$1.run(<Unknown Source>:Unknown line)
TRACE 300010:
	java.lang.Class.getDeclaredMethods0(<Unknown Source>:Unknown line)
	java.lang.Class.privateGetDeclaredMethods(<Unknown Source>:Unknown line)
	java.lang.Class.getDeclaredMethod(<Unknown Source>:Unknown line)
	java.lang.invoke.MethodHandle.<clinit>(<Unknown Source>:Unknown line)
TRACE 300115:
	java.util.ResourceBundle$Control.newBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.loadBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.findBundle(<Unknown Source>:Unknown line)
	java.util.ResourceBundle.getBundleImpl(<Unknown Source>:Unknown line)
TRACE 300001:
	java.lang.invoke.MethodHandle.<clinit>(<Unknown Source>:Unknown line)
TRACE 300093:
	java.io.WinNTFileSystem.canonicalizeWithPrefix0(<Unknown Source>:Unknown line)
	java.io.WinNTFileSystem.canonicalizeWithPrefix(<Unknown Source>:Unknown line)
	java.io.WinNTFileSystem.canonicalize(<Unknown Source>:Unknown line)
	java.io.File.getCanonicalPath(<Unknown Source>:Unknown line)
TRACE 300092:
	java.io.WinNTFileSystem.canonicalize0(<Unknown Source>:Unknown line)
	java.io.WinNTFileSystem.canonicalize(<Unknown Source>:Unknown line)
	java.io.File.getCanonicalPath(<Unknown Source>:Unknown line)
	java.io.File.getCanonicalFile(<Unknown Source>:Unknown line)
TRACE 300091:
	sun.nio.cs.SingleByte$Decoder.decodeArrayLoop(<Unknown Source>:Unknown line)
	sun.nio.cs.SingleByte$Decoder.decodeLoop(<Unknown Source>:Unknown line)
	java.nio.charset.CharsetDecoder.decode(<Unknown Source>:Unknown line)
	sun.nio.cs.StreamDecoder.implRead(<Unknown Source>:Unknown line)
TRACE 300016:
	java.lang.ClassLoader.checkName(<Unknown Source>:Unknown line)
	java.lang.ClassLoader.findLoadedClass(<Unknown Source>:Unknown line)
	java.lang.ClassLoader.loadClass(<Unknown Source>:Unknown line)
	sun.misc.Launcher$AppClassLoader.loadClass(<Unknown Source>:Unknown line)
TRACE 300090:
	java.lang.String.indexOf(<Unknown Source>:Unknown line)
	java.lang.String.indexOf(<Unknown Source>:Unknown line)
	sun.misc.Launcher.getClassPath(<Unknown Source>:Unknown line)
	sun.misc.Launcher.access$200(<Unknown Source>:Unknown line)
TRACE 300083:
	java.util.ResourceBundle.<clinit>(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper$ResourceBundleHolder.<clinit>(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.getLocalizedMessage(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.abort(<Unknown Source>:Unknown line)
TRACE 300011:
	sun.launcher.LauncherHelper.<clinit>(<Unknown Source>:Unknown line)
TRACE 300020:
	sun.misc.URLClassPath$3.run(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$3.run(<Unknown Source>:Unknown line)
	java.security.AccessController.doPrivileged(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath.getLoader(<Unknown Source>:Unknown line)
TRACE 300081:
	java.util.ResourceBundle.<clinit>(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper$ResourceBundleHolder.<clinit>(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.getLocalizedMessage(<Unknown Source>:Unknown line)
	sun.launcher.LauncherHelper.abort(<Unknown Source>:Unknown line)
TRACE 300117:
	java.lang.AbstractStringBuilder.expandCapacity(<Unknown Source>:Unknown line)
	java.lang.AbstractStringBuilder.ensureCapacityInternal(<Unknown Source>:Unknown line)
	java.lang.AbstractStringBuilder.append(<Unknown Source>:Unknown line)
	java.lang.StringBuilder.append(<Unknown Source>:Unknown line)
TRACE 300094:
	java.lang.System.arraycopy(<Unknown Source>:Unknown line)
	java.util.Arrays.copyOf(<Unknown Source>:Unknown line)
	java.util.Arrays.copyOf(<Unknown Source>:Unknown line)
	java.util.ArrayList.grow(<Unknown Source>:Unknown line)
TRACE 300078:
	java.util.jar.JarFile.getBytes(<Unknown Source>:Unknown line)
	java.util.jar.JarFile.checkForSpecialAttributes(<Unknown Source>:Unknown line)
	java.util.jar.JarFile.hasClassPathAttribute(<Unknown Source>:Unknown line)
	java.util.jar.JavaUtilJarAccessImpl.jarFileHasClassPathAttribute(<Unknown Source>:Unknown line)
TRACE 300074:
	java.util.zip.ZipFile.getInputStream(<Unknown Source>:Unknown line)
	java.util.jar.JarFile.getBytes(<Unknown Source>:Unknown line)
	java.util.jar.JarFile.checkForSpecialAttributes(<Unknown Source>:Unknown line)
	java.util.jar.JarFile.hasClassPathAttribute(<Unknown Source>:Unknown line)
TRACE 300069:
	sun.util.calendar.ZoneInfoFile.getZoneInfo(<Unknown Source>:Unknown line)
	sun.util.calendar.ZoneInfoFile.getZoneInfo0(<Unknown Source>:Unknown line)
	sun.util.calendar.ZoneInfoFile.getZoneInfo(<Unknown Source>:Unknown line)
	sun.util.calendar.ZoneInfo.getTimeZone(<Unknown Source>:Unknown line)
TRACE 300027:
	sun.nio.cs.UTF_8.newDecoder(<Unknown Source>:Unknown line)
	sun.nio.cs.ThreadLocalCoders$1.create(<Unknown Source>:Unknown line)
	sun.nio.cs.ThreadLocalCoders$Cache.forName(<Unknown Source>:Unknown line)
	sun.nio.cs.ThreadLocalCoders.decoderFor(<Unknown Source>:Unknown line)
TRACE 300028:
	sun.misc.URLClassPath.getLoader(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath.getResource(<Unknown Source>:Unknown line)
	java.net.URLClassLoader$1.run(<Unknown Source>:Unknown line)
	java.net.URLClassLoader$1.run(<Unknown Source>:Unknown line)
TRACE 300029:
	java.lang.String.indexOf(<Unknown Source>:Unknown line)
	java.lang.String.indexOf(<Unknown Source>:Unknown line)
	java.net.Parts.<init>(<Unknown Source>:Unknown line)
	java.net.URL.<init>(<Unknown Source>:Unknown line)
TRACE 300030:
	java.lang.System.arraycopy(<Unknown Source>:Unknown line)
	java.lang.String.getChars(<Unknown Source>:Unknown line)
	java.lang.AbstractStringBuilder.append(<Unknown Source>:Unknown line)
	java.lang.StringBuilder.append(<Unknown Source>:Unknown line)
TRACE 300067:
	sun.util.calendar.ZoneInfoFile.load(<Unknown Source>:Unknown line)
	sun.util.calendar.ZoneInfoFile.access$000(<Unknown Source>:Unknown line)
	sun.util.calendar.ZoneInfoFile$1.run(<Unknown Source>:Unknown line)
	java.security.AccessController.doPrivileged(<Unknown Source>:Unknown line)
TRACE 300032:
	java.util.Arrays.copyOf(<Unknown Source>:Unknown line)
	java.lang.String.concat(<Unknown Source>:Unknown line)
	java.net.URLClassLoader$1.run(<Unknown Source>:Unknown line)
	java.net.URLClassLoader$1.run(<Unknown Source>:Unknown line)
TRACE 300066:
	sun.util.calendar.ZoneInfoFile.load(<Unknown Source>:Unknown line)
	sun.util.calendar.ZoneInfoFile.access$000(<Unknown Source>:Unknown line)
	sun.util.calendar.ZoneInfoFile$1.run(<Unknown Source>:Unknown line)
	java.security.AccessController.doPrivileged(<Unknown Source>:Unknown line)
TRACE 300034:
	java.net.URLStreamHandler.parseURL(<Unknown Source>:Unknown line)
	sun.net.www.protocol.file.Handler.parseURL(<Unknown Source>:Unknown line)
	java.net.URL.<init>(<Unknown Source>:Unknown line)
	java.net.URL.<init>(<Unknown Source>:Unknown line)
TRACE 300035:
	sun.misc.URLClassPath$JarLoader.ensureOpen(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$JarLoader.<init>(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$3.run(<Unknown Source>:Unknown line)
	sun.misc.URLClassPath$3.run(<Unknown Source>:Unknown line)
TRACE 300065:
	java.io.FileInputStream.readBytes(<Unknown Source>:Unknown line)
	java.io.FileInputStream.read(<Unknown Source>:Unknown line)
	java.io.BufferedInputStream.fill(<Unknown Source>:Unknown line)
	java.io.BufferedInputStream.read1(<Unknown Source>:Unknown line)
TRACE 300064:
	java.lang.System.arraycopy(<Unknown Source>:Unknown line)
	java.io.BufferedInputStream.read1(<Unknown Source>:Unknown line)
	java.io.BufferedInputStream.read(<Unknown Source>:Unknown line)
	java.io.DataInputStream.readFully(<Unknown Source>:Unknown line)
TRACE 300060:
	sun.util.calendar.ZoneInfo.<clinit>(<Unknown Source>:Unknown line)
	java.util.TimeZone.getTimeZone(<Unknown Source>:Unknown line)
	java.util.TimeZone.setDefaultZone(<Unknown Source>:Unknown line)
	java.util.TimeZone.getDefaultRef(<Unknown Source>:Unknown line)
TRACE 300123:
	sun.nio.cs.StreamEncoder.writeBytes(<Unknown Source>:Unknown line)
	sun.nio.cs.StreamEncoder.implFlushBuffer(<Unknown Source>:Unknown line)
	sun.nio.cs.StreamEncoder.flushBuffer(<Unknown Source>:Unknown line)
	java.io.OutputStreamWriter.flushBuffer(<Unknown Source>:Unknown line)
TRACE 300057:
	sun.util.calendar.CalendarSystem.<clinit>(<Unknown Source>:Unknown line)
	java.util.Date.<clinit>(<Unknown Source>:Unknown line)
	java.util.zip.ZipUtils.dosToJavaTime(<Unknown Source>:Unknown line)
	java.util.zip.ZipFile.getZipEntry(<Unknown Source>:Unknown line)
TRACE 300041:
	java.util.Arrays.copyOf(<Unknown Source>:Unknown line)
	java.lang.String.<init>(<Unknown Source>:Unknown line)
	sun.nio.cs.FastCharsetProvider.toLower(<Unknown Source>:Unknown line)
	sun.nio.cs.FastCharsetProvider.lookup(<Unknown Source>:Unknown line)
TRACE 300042:
	java.util.zip.ZipFile.<init>(<Unknown Source>:Unknown line)
	java.util.zip.ZipFile.<init>(<Unknown Source>:Unknown line)
	java.util.jar.JarFile.<init>(<Unknown Source>:Unknown line)
	java.util.jar.JarFile.<init>(<Unknown Source>:Unknown line)
TRACE 300051:
	sun.nio.cs.UTF_8.newEncoder(<Unknown Source>:Unknown line)
	java.util.zip.ZipCoder.encoder(<Unknown Source>:Unknown line)
	java.util.zip.ZipCoder.getBytes(<Unknown Source>:Unknown line)
	java.util.zip.ZipFile.getEntry(<Unknown Source>:Unknown line)
TRACE 300048:
	sun.misc.Perf.createLong(<Unknown Source>:Unknown line)
	sun.misc.PerfCounter.<init>(<Unknown Source>:Unknown line)
	sun.misc.PerfCounter.newPerfCounter(<Unknown Source>:Unknown line)
	sun.misc.PerfCounter$CoreCounters.<clinit>(<Unknown Source>:Unknown line)
CPU SAMPLES BEGIN (total = 68) Sat Dec 10 23:16:26 2016
rank   self  accum   count trace method
   1 11.76% 11.76%       8 300118 sun.launcher.LauncherHelper.getLocalizedMessage
   2 11.76% 23.53%       8 300079 sun.launcher.LauncherHelper.getLocalizedMessage
   3 10.29% 33.82%       7 300082 java.util.ResourceBundle.<clinit>
   4  5.88% 39.71%       4 300080 sun.launcher.LauncherHelper$ResourceBundleHolder.<clinit>
   5  1.47% 41.18%       1 300004 java.lang.invoke.MethodType.<clinit>
   6  1.47% 42.65%       1 300112 java.util.ResourceBundle.findBundle
   7  1.47% 44.12%       1 300106 java.util.Arrays.asList
   8  1.47% 45.59%       1 300102 java.net.URLClassLoader$3.next
   9  1.47% 47.06%       1 300101 java.lang.AbstractStringBuilder.<init>
  10  1.47% 48.53%       1 300100 sun.misc.URLClassPath$JarLoader.getJarFile
  11  1.47% 50.00%       1 300010 java.lang.Class.getDeclaredMethods0
  12  1.47% 51.47%       1 300115 java.util.ResourceBundle$Control.newBundle
  13  1.47% 52.94%       1 300001 java.lang.invoke.MethodHandle.<clinit>
  14  1.47% 54.41%       1 300093 java.io.WinNTFileSystem.canonicalizeWithPrefix0
  15  1.47% 55.88%       1 300092 java.io.WinNTFileSystem.canonicalize0
  16  1.47% 57.35%       1 300091 sun.nio.cs.SingleByte$Decoder.decodeArrayLoop
  17  1.47% 58.82%       1 300016 java.lang.ClassLoader.checkName
  18  1.47% 60.29%       1 300090 java.lang.String.indexOf
  19  1.47% 61.76%       1 300083 java.util.ResourceBundle.<clinit>
  20  1.47% 63.24%       1 300011 sun.launcher.LauncherHelper.<clinit>
  21  1.47% 64.71%       1 300020 sun.misc.URLClassPath$3.run
  22  1.47% 66.18%       1 300081 java.util.ResourceBundle.<clinit>
  23  1.47% 67.65%       1 300117 java.lang.AbstractStringBuilder.expandCapacity
  24  1.47% 69.12%       1 300094 java.lang.System.arraycopy
  25  1.47% 70.59%       1 300078 java.util.jar.JarFile.getBytes
  26  1.47% 72.06%       1 300074 java.util.zip.ZipFile.getInputStream
  27  1.47% 73.53%       1 300069 sun.util.calendar.ZoneInfoFile.getZoneInfo
  28  1.47% 75.00%       1 300027 sun.nio.cs.UTF_8.newDecoder
  29  1.47% 76.47%       1 300028 sun.misc.URLClassPath.getLoader
  30  1.47% 77.94%       1 300029 java.lang.String.indexOf
  31  1.47% 79.41%       1 300030 java.lang.System.arraycopy
  32  1.47% 80.88%       1 300067 sun.util.calendar.ZoneInfoFile.load
  33  1.47% 82.35%       1 300032 java.util.Arrays.copyOf
  34  1.47% 83.82%       1 300066 sun.util.calendar.ZoneInfoFile.load
  35  1.47% 85.29%       1 300034 java.net.URLStreamHandler.parseURL
  36  1.47% 86.76%       1 300035 sun.misc.URLClassPath$JarLoader.ensureOpen
  37  1.47% 88.24%       1 300065 java.io.FileInputStream.readBytes
  38  1.47% 89.71%       1 300064 java.lang.System.arraycopy
  39  1.47% 91.18%       1 300060 sun.util.calendar.ZoneInfo.<clinit>
  40  1.47% 92.65%       1 300123 sun.nio.cs.StreamEncoder.writeBytes
  41  1.47% 94.12%       1 300057 sun.util.calendar.CalendarSystem.<clinit>
  42  1.47% 95.59%       1 300041 java.util.Arrays.copyOf
  43  1.47% 97.06%       1 300042 java.util.zip.ZipFile.<init>
  44  1.47% 98.53%       1 300051 sun.nio.cs.UTF_8.newEncoder
  45  1.47% 100.00%       1 300048 sun.misc.Perf.createLong
CPU SAMPLES END
